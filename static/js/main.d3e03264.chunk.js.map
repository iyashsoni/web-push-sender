{"version":3,"sources":["components/PushForm.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["firebase","require","initializeApp","apiKey","authDomain","databaseURL","projectId","functions","PushForm","props","state","message","setMessage","bind","sendNotification","event","this","setState","target","value","token","localStorage","getItem","tokenJson","JSON","parse","reqBody","userAuth","publicKey","userPublicKey","endpoint","httpsCallable","sendNotificationFunction","then","result","console","log","catch","error","code","details","finally","Container","fixed","TextField","id","label","variant","onChange","Fab","color","onClick","React","Component","Header","className","App","registration","isRegistered","register","Push","requestPermissionAndGetToken","res","stringify","setItem","err","view","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","unregister"],"mappings":"4UAEMA,EAAWC,EAAQ,IACzBA,EAAQ,IAQRD,EAASE,cANY,CACnBC,OAAQ,0CACRC,WAAY,0CACZC,YAAa,iDACbC,UAAW,4BAKb,IAAIC,EAAYP,EAASO,YAyDVC,E,YAtDX,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,QAAS,IAGX,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBAClB,EAAKC,iBAAmB,EAAKA,iBAAiBD,KAAtB,gBAPP,E,wEAURE,GACTC,KAAKC,SAAS,CAACN,QAASI,EAAMG,OAAOC,U,uCAGtBJ,GAAQ,IAAD,OAClBK,EAAQC,aAAaC,QAAQ,SAC7BC,EAAYC,KAAKC,MAAML,GAEvBM,EAAU,CACZC,SAAUJ,EAAUI,SACpBC,UAAWL,EAAUM,cACrBC,SAAUP,EAAUO,SACpBnB,QAASK,KAAKN,MAAMC,SAGSJ,EAAUwB,cAAc,mBACvDC,CAAyBN,GAASO,MAAK,SAASC,GAC9CC,QAAQC,IAAI,wCACXC,OAAM,SAASC,GAChB,IAAIC,EAAOD,EAAMC,KACb5B,EAAU2B,EAAM3B,QAChB6B,EAAUF,EAAME,QACpBL,QAAQC,IAAI,+BAAgCG,EAAM5B,EAAS6B,MAC1DC,SAAQ,WACT,EAAKxB,SAAS,CAACN,QAAS,U,+BAK1B,OACE,kBAAC+B,EAAA,EAAD,CAAWC,OAAK,GACd,6BACE,kBAACC,EAAA,EAAD,CAAWC,GAAG,iBAAiBC,MAAM,oBAAoBC,QAAQ,WAAW5B,MAAOH,KAAKN,MAAMC,QAASqC,SAAUhC,KAAKJ,cAExH,6BACA,kBAACqC,EAAA,EAAD,CAAKF,QAAQ,WAAWG,MAAM,UAAUC,QAASnC,KAAKF,kBAAtD,qBACA,6BACA,6BACA,wHAA6F,2CAA7F,qD,GAjDasC,IAAMC,WCJdC,E,iLARP,OACI,6BACI,wBAAIC,UAAU,UAAd,wC,GAJKH,IAAMC,W,QC8CZG,E,YAtCb,aAAe,IAAD,sBACZ,8CACA,IAAIC,IAAgBpC,aAAaC,QAAQ,SAF7B,OAGZ,EAAKZ,MAAQ,CACXgD,aAAcD,GAEhB,EAAKE,SAAW,EAAKA,SAAS9C,KAAd,gBANJ,E,wEASF,IAAD,OACT+C,IAAKC,6BAb0B,2FAa+B5B,MAAK,SAAA6B,GACjE3B,QAAQC,IAAI,gBAAkBZ,KAAKuC,UAAUD,IAC7CzC,aAAa2C,QAAQ,QAASxC,KAAKuC,UAAUD,IAC7C,EAAK7C,SAAS,CAACyC,cAAc,OAC5BrB,OAAM,SAAA4B,GACP9B,QAAQC,IAAI,sBAAwB6B,Q,+BAKtC,IAAIC,EASJ,OAPEA,EADClD,KAAKN,MAAMgD,aACL,kBAAC,EAAD,MAEC,6BACE,+IACA,kBAACT,EAAA,EAAD,CAAKF,QAAQ,WAAWG,MAAM,UAAUC,QAASnC,KAAK2C,UAAtD,aAIV,kBAACjB,EAAA,EAAD,CAAWa,UAAU,OACnB,kBAAC,EAAD,MACCW,O,GAjCSd,IAAMC,WCGJc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7C,MAAK,SAAAwB,GACjCA,EAAasB,kB","file":"static/js/main.d3e03264.chunk.js","sourcesContent":["import React from 'react';\nimport {TextField, Fab, Container} from '@material-ui/core';\nconst firebase = require(\"firebase\");\nrequire(\"firebase/functions\");\n\nvar firebaseConfig = {\n  apiKey: \"AIzaSyBorif13n91ElwK4iDewJcTFmrgqDnmu_c\",\n  authDomain: \"web-push-sender-backend.firebaseapp.com\",\n  databaseURL: \"https://web-push-sender-backend.firebaseio.com\",\n  projectId: \"web-push-sender-backend\"\n};\nfirebase.initializeApp(firebaseConfig);\n\n// Initialize Cloud Functions through Firebase\nvar functions = firebase.functions();\n\nclass PushForm extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        message: ''\n      };\n  \n      this.setMessage = this.setMessage.bind(this);\n      this.sendNotification = this.sendNotification.bind(this);\n    }\n  \n    setMessage(event) {\n      this.setState({message: event.target.value});\n    }\n  \n    sendNotification(event) {     \n      var token = localStorage.getItem(\"token\");\n      var tokenJson = JSON.parse(token);\n\n      var reqBody = {\n        userAuth: tokenJson.userAuth,\n        publicKey: tokenJson.userPublicKey,\n        endpoint: tokenJson.endpoint,\n        message: this.state.message\n      }\n\n      var sendNotificationFunction = functions.httpsCallable('sendNotification');\n      sendNotificationFunction(reqBody).then(function(result) {\n        console.log(\"Notification sent successfully...\");\n      }).catch(function(error) {\n        var code = error.code;\n        var message = error.message;\n        var details = error.details;\n        console.log(\"Error sending notification: \", code, message, details);\n      }).finally(() => {\n        this.setState({message: ''});\n      });\n    };\n  \n    render() {\n      return (\n        <Container fixed>\n          <div>\n            <TextField id=\"outlined-basic\" label=\"Your message here\" variant=\"outlined\" value={this.state.message} onChange={this.setMessage} />\n          </div>\n          <br/>\n          <Fab variant=\"extended\" color=\"primary\" onClick={this.sendNotification}>Send Notification</Fab>\n          <br/>\n          <br/>\n          <h4>If you fail to receive notification, the token might have expired. Delete the token from <b>localStorage</b> and reset the permissions for Notification.</h4>\n        </Container>\n      );\n    }\n}\n\nexport default PushForm;","import React from 'react'\n\nclass Header extends React.Component {\n    render() {\n        return(\n            <div>\n                <h1 className=\"Header\">Easy Web Push Notfications Demo</h1>\n            </div>\n        );\n    }\n}\n\nexport default Header","import React from 'react';\nimport './App.css';\nimport PushForm from './components/PushForm';\nimport Header from './components/Header'\nimport Push from 'easy-web-notifications';\nimport {Fab, Container} from '@material-ui/core'\n\nconst applicationServerPublicKey = \"BNqEgHEqLOmF_B5rAkjwbFiTr6k5HzthWYul3UmorHOKXeXubI1D0oRw-nMN30ju6KTle2b_q9vNY1LAFtCz9B8\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    let registration = (localStorage.getItem(\"token\")) ? true : false;\n    this.state = {\n      isRegistered: registration\n    };\n    this.register = this.register.bind(this);\n  }\n\n  register() {\n    Push.requestPermissionAndGetToken(applicationServerPublicKey).then(res => {\n      console.log(\"Token is : \\n\" + JSON.stringify(res));\n      localStorage.setItem(\"token\", JSON.stringify(res));\n      this.setState({isRegistered: true})\n    }).catch(err => {\n      console.log(\"Registration Failed\" + err);\n    });\n  }\n\n  render() {\n    let view;\n    if(this.state.isRegistered) {\n      view = <PushForm />\n    } else {\n      view =  <div>\n                <h3>Seems like you don't have the permission yet, please click the button below and allow Notification Permissions!</h3>\n                <Fab variant=\"extended\" color=\"primary\" onClick={this.register}>Register</Fab>\n              </div>\n    }\n    return (\n      <Container className=\"App\">\n        <Header />\n        {view}\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}